version: v1.0
name: WikiRate Standard Pipeline
agent:
  machine:
    type: e1-standard-2
    os_image: ubuntu2004
global_job_config:
  env_vars:
    - name: BUNDLE_PATH
      value: ~/wikirate/vendor/bundle/
    - name: RAILS_ENV
      value: test
    - name: TMPSETS
      value: "true"
  prologue:
    commands:
      # INSTALL WIKIRATE CODE AND DEPENDENCIES
      - checkout
      - sem-version ruby 2.7.3
      - git submodule update --init --recursive
      - sem-service start mysql 8.0
      - cp -R config/sample/* config/

      # SETUP ALIAS(ES)
      - alias be='bundle exec'

      # INSTALL CODE CLIMATE REPORTER
      - curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
      - chmod +x ./cc-test-reporter

      # TWEAK ENVIRONMENTAL VARIABLES
      # ...that are too complex for the env_vars config.

      # without the following, code climate uses git to get git details.
      # Semaphore uses the merge sha for PRS, so this leads to coverage report failures.
      - if [ $SEMAPHORE_GIT_PR_SHA ]; then export GIT_COMMIT_SHA=$SEMAPHORE_GIT_PR_SHA; fi;
      - export S3_PATH="s3://deckodev-test/$SEMAPHORE_PROJECT_NAME/$SEMAPHORE_GIT_BRANCH/coverage/$SEMAPHORE_WORKFLOW_ID/"


blocks:
  - name: Unit Tests
    task:
      prologue:
        commands:
          # - cache delete gems-baseline # occasionally clear
          - cache restore gems-baseline
          - GLCHECK=`checksum Gemfile.lock`
          - cache restore gems-$GLCHECK
          - bundle config set --local deployment 'true'
          - bundle install
          - cache store gems-$GLCHECK vendor/bundle
          - cache store gems-baseline vendor/bundle
          - cache store bundle-config .bundle
          - ./cc-test-reporter before-build

          - nvm use 12.18.2
          - be decko setup

      env_vars:
        - name: RAILS_ROOT
          value: .
      jobs:
        - name: RSpec
          commands:
            - be rspec -s --format RspecJunitFormatter --out junit.xml --format documentation
      epilogue:
        on_pass:
          commands:
            - ./cc-test-reporter format-coverage --output "coverage/codeclimate.$SEMAPHORE_JOB_ID.json" -t simplecov
            - aws s3 cp "coverage/codeclimate.$SEMAPHORE_JOB_ID.json" $S3_PATH
        always:
          commands:
            - test-results publish junit.xml

  - name: Integration Tests
    task:
      secrets:
        - name: wikirate-cypress
      prologue:
        commands:
          - cache restore bundle-config
          - cache restore gems-$(checksum Gemfile.lock)
          - be decko setup

      jobs:
        - name: Cucumber
          commands:
            - RAILS_ENV=cucumber bundle exec decko cucumber -- --format pretty --format junit --out /home/semaphore/reports

        - name: Cypress
          commands:
            - RAILS_ENV=cypress bundle exec decko server -p 5002 &
            - nvm use 12.18.2
            - yarn install
            - yarn run cypress run --record --reporter junit --reporter-options "mochaFile=/home/semaphore/reports/cypress-output-[hash].xml"

      epilogue:
        always:
          commands:
            - test-results publish /home/semaphore/reports/*.xml
            - ./cc-test-reporter format-coverage --output "coverage/codeclimate.$SEMAPHORE_JOB_ID.json" -t simplecov
            - aws s3 cp "coverage/codeclimate.$SEMAPHORE_JOB_ID.json" $S3_PATH

  # NOTE: the code climate reporting cannot be handled in after_pipeline, because
  # after_pipeline does not make secrets available - efm 2022-10-12
  - name: Coverage Report
    task:
      jobs:
        - name: CodeClimate Coverage
          commands:
            - aws s3 sync $S3_PATH coverage/
            - ./cc-test-reporter sum-coverage --output - --parts $(ls -1 coverage/ | wc -l) coverage/codeclimate.*.json > coverage/codeclimate.json
            - ./cc-test-reporter upload-coverage

after_pipeline:
  task:
    jobs:
      - name: Publish Results
        commands:
          - test-results gen-pipeline-report