require "colorize"

namespace :backup do
  task :create do
    on roles(:db) do
      backup_script = "/opt/bin/backup_local"
      execute "#{backup_script} #{fetch :deploy_to} #{fetch :database}"
    end
  end

  task :pull do
    invoke "backup:download"
    invoke "backup:refresh_local"
  end

  task :download do
    backup_dir = fetch :local_backups_dir
    run_locally do
      execute :rm, "-rf #{backup_dir}"
      execute :mkdir, backup_dir
    end
    on roles(:db) do
      download! "#{fetch :data_backups_dir}/db.gz", backup_dir
    end
  end

  task :refresh_local do
    invoke "backup:unzip_local"
    invoke "backup:update_db"
    # run_locally do
    #   execute :pull_wikirate
    # end
  end

  task :unzip do
    on roles(:db) do
      execute :sudo, "/home/deploy/bin/unzip_wikirate_database.sh"
    end
  end

  task :unzip_local do
    run_locally do
      backup_dir = fetch :local_backups_dir
      if test("[ ! -f #{backup_dir}/db ]")
        within backup_dir do
          execute :gunzip, "db.gz"
        end
      end
    end
  end

  # refresh db from production backup (unzip first!)
  task :refresh do
    raise "no refreshing production!!!" if fetch(:stage) == :production
    ask :database, "what should the new/refreshed database be called?"
    # invoke "backup:unzip"
    database = fetch :database
    on roles(:db) do
      execute :mysql, "-e 'drop database if exists #{database}'"
      execute :mysql, "-e 'create database #{database}'"
      execute :mysql, "#{database} < /tmp/wikirate_latest.sql"
    end
    puts "Don't forget to update database.yml and restart server!".yellow
  end

  task :update_db do
    run_locally do
      backup_dir = fetch :local_backups_dir
      if test("[ -f #{backup_dir}/db ]")
        within backup_dir do
          info = YAML.load IO.read("config/database.yml")
          local_db = info["development"]
          mysql_options = "-u #{local_db['username']} #{local_db['database']}"
          mysql_options << " -p#{local_db['password']}" if local_db["password"]

          # FIXME: local backup should use same task/script as remote
          dumpfile = "before_importing_#{Time.new.strftime('%Y%m%d%H%M%S')}.sql"
          execute :mysqldump, "#{mysql_options} > #{dumpfile}"

          execute :mysql, "#{mysql_options} < db"
        end
      end
    end
  end

  desc "Backup to local /tmp/wikirate"
  task :get do
    on roles(:db) do
      invoke "backup:create"
      invoke "backup:download"
      invoke "backup:unzip_local"
      invoke "backup:update_db"
    end
  end
end
