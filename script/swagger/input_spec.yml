---
openapi: 3.0.3
info:
  description: |-
    This API provides access to WikiRate's data. To receive responses in JSON format, 
    you have three options:
    1. Set the HTTP access header to `application/json` in your request
    2. Append `.json` to the request URLs.
    3. Add `format=json` to the query parameters.
    
    WikiRate is built using Decko, where everything is represented as `card`. This 
    includes images, accounts, searches, fields, and more. Therefore, every request for 
    a webpage on WikiRate.org or through its REST API corresponds to a `card`.
    
    The documentation is divided into two sections: generic Decko card documentation 
    (under **Decko**) and more WikiRate-specific card types (under **WikiRate**).

  version: 1.0.0
  title: Wikirate RESTful API
  contact:
    email: info@wikirate.org
  license:
    name: GPL-3.0
    url: https://www.gnu.org/licenses/gpl-3.0.en.html
externalDocs:
  description: Find out more about Wikirate
  url: https://wikirate.org/About
servers:
  - description: live server
    url: https://wikirate.org
  - description: staging server
    url: https://staging.wikirate.org
tags:
  - name: Decko
    description: |-
      "Cards" are the building blocks of Decko (and thus Wikirate). All requests
          are CRUD operations on cards
  - name: Wikirate
    description: |-
      RESTful Decko api calls can be made with any card on Wikirate. The
          following examples feature some customized JSON views.
paths:
  "/{mark}":
    get:
      tags:
        - Decko
      summary: get specified view of card
      description: |-
        All read operations involve producing a _view_ of a card.

        The request can come in several variants, eg\:
          1. /{mark}?view={view} (standard)
          1. /{mark}/{view}
          1. /?mark={mark}&view={view}
      parameters:
        - "$ref": "#/components/parameters/cardmark"
        - "$ref": "#/components/parameters/view"
      responses:
        200:
          "$ref": "#/components/responses/200"
        404:
          "$ref": "#/components/responses/404"
    put:
      tags:
        - Decko
      summary: update a card
      description: |-
        Update a card's name, type, and/or content. It's also possible to use
        a GET request with /update/{mark}
      parameters:
        - "$ref": "#/components/parameters/cardmark"
        - "$ref": "#/components/parameters/card"
        - "$ref": "#/components/parameters/success"
      responses:
        302:
          "$ref": "#/components/responses/302"
        404:
          "$ref": "#/components/responses/404"
    delete:
      tags:
        - Decko
      summary: delete a card
      parameters:
        - "$ref": "#/components/parameters/cardmark"
        - "$ref": "#/components/parameters/success"
      responses:
        302:
          "$ref": "#/components/responses/302"
        404:
          "$ref": "#/components/responses/404"
  "/type/card":
    post:
      tags:
        - Decko
      summary: create a card
      description: |-
        Create a card, setting its name, type, and/or content. It's also possible to use
        a GET request with /card/create
      parameters:
        - "$ref": "#/components/parameters/cardmark"
        - "$ref": "#/components/parameters/card"
        - "$ref": "#/components/parameters/success"
      responses:
        302:
          "$ref": "#/components/responses/302"
components:
  responses:
    200:
      description: Card data. Defaults to molecule view.
      content:
        application/json:
          schema:
            "$ref": "#/components/schemas/molecule_view"
    404:
      description: Could not find the card requested.
      content:
        application/json:
          schema:
            "$ref": "#/components/schemas/errors_view"
    302:
      description: |-
        Successful non-idempotent requests redirect to idempotent GET
        requests.
  parameters:
    format:
      name: format
      in: query
      required: true
      description: The bulk API supports both JSON and CSV file formats.
      schema:
        type: string
      example: json
    limit:
      name: limit
      in: query
      required: false
      description: limit for the items list
      schema:
        type: integer
        default: 20
    offset:
      name: offset
      in: query
      required: false
      description: offset for the items list
      schema:
        type: integer
        default: 0
    cardmark:
      name: mark
      in: path
      required: true
      description: |-
        A card's "mark" can be a name, an id, or a codename. Prefix ids with a tilde (~) and codenames with a colon (\:).
        - **name:** Every card has a unique name. A name can have many variants. For example, `Berlin`, `berlin`, and `BERLIN!` all refer to the same card. The singularized, lower-cased, underscored variant of a name is called its "key."
        - **id:** Every card stored in the database has a unique numerical id. _Note: some cards, called 'virtual cards', are not stored in the database and therefore do not have a numerical id. For example, the name `Menu+*refer to` identifies a virtual Search card that finds all the cards that refer to the `Menu` card.Because it is based on patterns that apply to all cards with names ending in `+*refer to`, there is no need to store each instance of that pattern._
        - **codename:** Some cards also have special identifiers called "codenames". Card names can be edited by Decko users. If these names were used directly in code, then renaming would break that code. Codename identifiers solve this problem by providing persistent readable identifiers. Only cards referred to directly in code have codenames.
      schema:
        type: string
        enum:
          - "{name}"
          - "~{id}"
          - ":{codename}"
    view:
      name: view
      in: query
      required: false
      schema:
        type: string
        enum:
          - nucleus
          - atom
          - molecule
          - id
          - codename
          - name
          - key
          - content
          - type
        default: molecule
      description: The view determines the contents of the response JSON.  See the
        corresponding schema for more details.
    card:
      name: card
      in: header
      schema:
        type: object
        properties:
          name:
            type: string
          type:
            type: string
          content:
            type: string
      description: |-
        The card parameter contains card field data, subcard field data. It follows RubyOnRails hash parameter pattern; for example, a card's name is represented as `card[name]=foobar`.
        The most common fields are:
        - **name:** Every card has a unique name.
        - **type:** The card\'s type.  Note that every card has a type, and the value of this field should be the type card\'s name. You can alternatively use **type_id** or **type_code** with the type card\s id
          or mark respectively.
  
        - **content:** The card\'s content (in string form)
        - **subcards** A hash that contains information about additional cards to be handled in the same transaction.  Each key is a card name, and each value is a card hash. Eg `cards[subcards][+color][content]=red`
    success:
      name: success
      in: header
      schema:
        type: object
      description: parameters hash to pass on to the GET request to which a successful
        request will be redirected.  Eg, `success[mark]=mycardname`

